/*
 * Copyright 2018 Mikhail Lopatkin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package name.mlopatkin.andlogview.building;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;
import org.gradle.api.DefaultTask;
import org.gradle.api.file.DirectoryProperty;
import org.gradle.api.provider.Property;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.OutputDirectory;
import org.gradle.api.tasks.TaskAction;

import javax.lang.model.element.Modifier;
import java.io.IOException;

/**
 * A task to generate build metadata java class.
 */
public abstract class GenerateBuildMetadata extends DefaultTask {
    @Input
    public abstract Property<String> getRevision();

    @Input
    public abstract Property<String> getPackageName();

    @Input
    public abstract Property<String> getClassName();

    @Input
    public abstract Property<String> getVersion();

    @OutputDirectory
    public abstract DirectoryProperty getInto();

    @TaskAction
    public void generate() throws IOException {
        ClassName fullClassName = ClassName.get(getPackageName().get(), getClassName().get());
        TypeSpec metadataClass = TypeSpec.classBuilder(fullClassName).addModifiers(Modifier.FINAL, Modifier.PUBLIC)
                .addField(stringConstant("VERSION", getVersion().get(), "Version of the application."))
                .addField(stringConstant("REVISION", getRevision().get(), "Source revision of which app is built."))
                .build();
        JavaFile.builder(fullClassName.packageName(), metadataClass)
                .indent("    ")
                .skipJavaLangImports(true)
                .addFileComment("This file was generated by GenerateBuildMetadata task.\nDO NOT EDIT!")
                .build().writeTo(getInto().get().getAsFile());
    }

    private static FieldSpec stringConstant(String name, String value, String doc) {
        return FieldSpec.builder(String.class, name, Modifier.FINAL, Modifier.PUBLIC, Modifier.STATIC)
                .initializer("$S", value)
                .addJavadoc("$L\n", doc)
                .build();
    }
}
