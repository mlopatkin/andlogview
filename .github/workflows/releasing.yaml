name: Run releasing action (snapshot or release)
on:
  push:
    branches:
      - master
      - release/*
    tags-ignore:
      - "*-snapshot"
    paths-ignore:
      - 'docs/site/**'

env:
  PYTHON_BINARY: python3
jobs:
  build-snapshot:
    runs-on: ubuntu-latest
    container: ghcr.io/mlopatkin/andlogview-build-environment@sha256:5d34e961a07019b09599025c5de65f3e7d6a44b80072f92114e35bde212e41b8
    env:
      LOGVIEW_SNAPSHOT_BUILD: true
    # Only build snapshots on master
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@0bdd871935719febd78681f197cd39af5b6e16a6 # 4.2.2
      - name: Run checks and build noJRE installer
        # This can benefit from the configuration cache, unlike the installer builds later
        run: >
            ./gradlew
            -Porg.gradle.java.installations.fromEnv=JDK8,JDK17
            -Porg.gradle.java.installations.auto-download=false
            -Porg.gradle.java.installations.auto-detect=false
            --stacktrace
            check noJreInstaller
      - name: Build and publish snapshot
        run: >
            ./gradlew
            -Porg.gradle.java.installations.fromEnv=JDK8,JDK17
            -Porg.gradle.java.installations.auto-download=false
            -Porg.gradle.java.installations.auto-detect=false
            --stacktrace
            linuxInstallers
      - name: Publish artifacts
        uses: ./.github/actions/publish-gradle-outputs
      - name: Update Snapshot Tag
        if: ${{ success() }}
        run: |
          git tag --force "latest-snapshot" $GITHUB_SHA && \
          git push --force origin "latest-snapshot"
      - name: Remove old release
        if: ${{ success() }}
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          tools/remove-release.sh "latest-snapshot" "$GITHUB_REPOSITORY"
      - name: Create new release
        if: ${{ success() }}
        run: >
          gh release create "latest-snapshot"
          --draft
          --latest=false
          --notes-file docs/releases/release_0.24.md
          --prerelease=true
          --title "latest-snapshot"
          --verify-tag
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Publish Linux and cross-platform installers
        if: ${{ success() }}
        shell: bash
        run: gh release upload "latest-snapshot" build/distributions/*
        env:
          GH_TOKEN: ${{ github.token }}

  build-snapshot-win:
    runs-on: windows-latest
    needs:
      - build-snapshot  # We need the release to be prepared first.
    # Only build snapshots on master
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Building the version number requires full history, but it is only used on Windows
          fetch-depth: 0
      - name: Set up Eclipse Temurin JDK 17
        uses: actions/setup-java@v4.6.0
        with:
          distribution: 'temurin'
          java-version: '17.0.13'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@0bdd871935719febd78681f197cd39af5b6e16a6 # 4.2.2
      - name: Build Windows Installers
        shell: cmd
        run: >
            gradlew.bat
            -Porg.gradle.java.installations.fromEnv=JDK8,JDK17
            -Porg.gradle.java.installations.auto-download=false
            -Porg.gradle.java.installations.auto-detect=false
            --stacktrace
            windowsInstallers
        env:
          LOGVIEW_SNAPSHOT_BUILD: true
      - name: Add Windows Installers to release
        if: ${{ success() }}
        shell: bash
        run: gh release upload "latest-snapshot" build/distributions/*
        env:
          GH_TOKEN: ${{ github.token }}

  build-snapshot-mac:
    runs-on: macos-latest
    needs:
      - build-snapshot  # We need the release to be prepared first.
    # Only build snapshots on master
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Eclipse Temurin JDK 17
        uses: actions/setup-java@v4.6.0
        with:
          distribution: 'temurin'
          java-version: '17.0.13'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@0bdd871935719febd78681f197cd39af5b6e16a6 # 4.2.2
      - name: Build macOS Installers
        shell: sh
        run: >
            ./gradlew
            -Porg.gradle.java.installations.fromEnv=JDK8,JDK17
            -Porg.gradle.java.installations.auto-download=false
            -Porg.gradle.java.installations.auto-detect=false
            --stacktrace
            macosInstallers
        env:
          LOGVIEW_SNAPSHOT_BUILD: true
      - name: Add macOS Installers to release
        if: ${{ success() }}
        shell: bash
        run: gh release upload "latest-snapshot" build/distributions/*
        env:
          GH_TOKEN: ${{ github.token }}

  publish-snapshot-release:
    runs-on: ubuntu-latest
    needs:
      - build-snapshot  # We need all the artifacts to be published
      - build-snapshot-win
      - build-snapshot-mac
    # Only build snapshots on master
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Publish draft release as pre-release
        if: ${{ success() }}
        run: >
          gh release edit "latest-snapshot"
          --draft=false
          --latest=false
          --prerelease=true
          --verify-tag
          --repo "$GITHUB_REPOSITORY"
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}

  build-tag:
    runs-on: ubuntu-latest
    container: ghcr.io/mlopatkin/andlogview-build-environment@sha256:5d34e961a07019b09599025c5de65f3e7d6a44b80072f92114e35bde212e41b8
    env:
      LOGVIEW_SNAPSHOT_BUILD: false
    # Only build releases out of tags
    if: github.ref_type == 'tag' && !endsWith(github.ref, '-snapshot')
    steps:
      - uses: actions/checkout@v4
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@0bdd871935719febd78681f197cd39af5b6e16a6 # 4.2.2
      - name: Run checks and build noJRE installer
        # This can benefit from the configuration cache, unlike the installer builds later
        run: >
            ./gradlew
            -Porg.gradle.java.installations.fromEnv=JDK8,JDK17
            -Porg.gradle.java.installations.auto-download=false
            -Porg.gradle.java.installations.auto-detect=false
            --stacktrace
            check noJreInstaller
      - name: Build and publish tag
        run: >
            ./gradlew
            -Porg.gradle.java.installations.fromEnv=JDK8,JDK17
            -Porg.gradle.java.installations.auto-download=false
            -Porg.gradle.java.installations.auto-detect=false
            --stacktrace
            linuxInstallers
      - name: Publish artifacts
        uses: ./.github/actions/publish-gradle-outputs
      - name: Create new release
        if: ${{ success() }}
        run: >
          gh release create "${{ github.ref_name }}"
          --draft
          --latest=false
          --notes-file docs/releases/release_0.24.md
          --prerelease=false
          --title "${{ github.ref_name }}"
          --verify-tag
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Publish Linux and cross-platform installers
        if: ${{ success() }}
        shell: bash
        run: gh release upload "${{ github.ref_name }}" build/distributions/*
        env:
          GH_TOKEN: ${{ github.token }}

  build-tag-win:
    runs-on: windows-latest
    needs:
      - build-tag  # We need the release to be prepared first.
    # Only build releases out of tags
    if: github.ref_type == 'tag' && !endsWith(github.ref, '-snapshot')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Eclipse Temurin JDK 17
        uses: actions/setup-java@v4.6.0
        with:
          distribution: 'temurin'
          java-version: '17.0.13'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@0bdd871935719febd78681f197cd39af5b6e16a6 # 4.2.2
      - name: Build Windows Installers
        shell: cmd
        run: >
            gradlew.bat
            -Porg.gradle.java.installations.fromEnv=JDK8,JDK17
            -Porg.gradle.java.installations.auto-download=false
            -Porg.gradle.java.installations.auto-detect=false
            --stacktrace
            windowsInstallers
        env:
          LOGVIEW_SNAPSHOT_BUILD: false
      - name: Add Windows Installers to release
        if: ${{ success() }}
        shell: bash
        run: gh release upload "${{ github.ref_name }}" build/distributions/*
        env:
          GH_TOKEN: ${{ github.token }}

  build-tag-mac:
    runs-on: macos-latest
    needs:
      - build-tag  # We need the release to be prepared first.
    # Only build releases out of tags
    if: github.ref_type == 'tag' && !endsWith(github.ref, '-snapshot')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up Eclipse Temurin JDK 17
        uses: actions/setup-java@v4.6.0
        with:
          distribution: 'temurin'
          java-version: '17.0.13'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@0bdd871935719febd78681f197cd39af5b6e16a6 # 4.2.2
      - name: Build macOS Installers
        shell: sh
        run: >
            ./gradlew
            -Porg.gradle.java.installations.fromEnv=JDK8,JDK17
            -Porg.gradle.java.installations.auto-download=false
            -Porg.gradle.java.installations.auto-detect=false
            --stacktrace
            macosInstallers
        env:
          LOGVIEW_SNAPSHOT_BUILD: false
      - name: Add macOS Installers to release
        if: ${{ success() }}
        shell: bash
        run: gh release upload "${{ github.ref_name }}" build/distributions/*
        env:
          GH_TOKEN: ${{ github.token }}


  mirror-to-bitbucket:
    runs-on: ubuntu-latest
    # build-snapshot publishes a tag that we want to sync with bitbucket as well, so wait for it to complete
    needs:
      - build-snapshot
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4
      - name: setup git for bitbucket
        run: tools/bitbucket-mirror/setup-bitbucket.sh
        shell: bash
        env:
          BITBUCKET_SSH_PRIVATE_KEY: ${{ secrets.BITBUCKET_SSH_KEY }}
          BITBUCKET_HOST_FINGERPRINT: ${{ secrets.BITBUCKET_HOST_FINGERPRINT }}
      - name: clone origin as mirror and push to bitbucket
        run: tools/bitbucket-mirror/clone-and-push.sh
        shell: bash
        env:
          MIRROR_REPO_PATH: ${{ runner.temp }}/origin
      - name: cleanup config
        run: tools/bitbucket-mirror/cleanup.sh
        shell: bash
        if: ${{ always() }}
